// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_service.proto

#include "telemetry_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace telemetry {
class AttitudeQRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttitudeQRequest>
      _instance;
} _AttitudeQRequest_default_instance_;
class AttitudeQResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttitudeQResponse>
      _instance;
} _AttitudeQResponse_default_instance_;
class HitEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HitEvent>
      _instance;
} _HitEvent_default_instance_;
class HeadingAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeadingAngle>
      _instance;
} _HeadingAngle_default_instance_;
class EventBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventBase>
      _instance;
} _EventBase_default_instance_;
class EventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventResponse>
      _instance;
} _EventResponse_default_instance_;
class HeadingEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeadingEvent>
      _instance;
} _HeadingEvent_default_instance_;
class WaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Waypoint>
      _instance;
} _Waypoint_default_instance_;
class WaypointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Waypoints>
      _instance;
} _Waypoints_default_instance_;
class NoContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NoContent>
      _instance;
} _NoContent_default_instance_;
}  // namespace telemetry
namespace protobuf_telemetry_5fservice_2eproto {
void InitDefaultsAttitudeQRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_AttitudeQRequest_default_instance_;
    new (ptr) ::telemetry::AttitudeQRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::AttitudeQRequest::InitAsDefaultInstance();
}

void InitDefaultsAttitudeQRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttitudeQRequestImpl);
}

void InitDefaultsAttitudeQResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_AttitudeQResponse_default_instance_;
    new (ptr) ::telemetry::AttitudeQResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::AttitudeQResponse::InitAsDefaultInstance();
}

void InitDefaultsAttitudeQResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttitudeQResponseImpl);
}

void InitDefaultsHitEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_HitEvent_default_instance_;
    new (ptr) ::telemetry::HitEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::HitEvent::InitAsDefaultInstance();
}

void InitDefaultsHitEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHitEventImpl);
}

void InitDefaultsHeadingAngleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_HeadingAngle_default_instance_;
    new (ptr) ::telemetry::HeadingAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::HeadingAngle::InitAsDefaultInstance();
}

void InitDefaultsHeadingAngle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeadingAngleImpl);
}

void InitDefaultsEventBaseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_EventBase_default_instance_;
    new (ptr) ::telemetry::EventBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::EventBase::InitAsDefaultInstance();
}

void InitDefaultsEventBase() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventBaseImpl);
}

void InitDefaultsEventResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_EventResponse_default_instance_;
    new (ptr) ::telemetry::EventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::EventResponse::InitAsDefaultInstance();
}

void InitDefaultsEventResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventResponseImpl);
}

void InitDefaultsHeadingEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_telemetry_5fservice_2eproto::InitDefaultsEventBase();
  protobuf_telemetry_5fservice_2eproto::InitDefaultsHeadingAngle();
  {
    void* ptr = &::telemetry::_HeadingEvent_default_instance_;
    new (ptr) ::telemetry::HeadingEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::HeadingEvent::InitAsDefaultInstance();
}

void InitDefaultsHeadingEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeadingEventImpl);
}

void InitDefaultsWaypointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_Waypoint_default_instance_;
    new (ptr) ::telemetry::Waypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::Waypoint::InitAsDefaultInstance();
}

void InitDefaultsWaypoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWaypointImpl);
}

void InitDefaultsWaypointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_telemetry_5fservice_2eproto::InitDefaultsWaypoint();
  {
    void* ptr = &::telemetry::_Waypoints_default_instance_;
    new (ptr) ::telemetry::Waypoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::Waypoints::InitAsDefaultInstance();
}

void InitDefaultsWaypoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWaypointsImpl);
}

void InitDefaultsNoContentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::telemetry::_NoContent_default_instance_;
    new (ptr) ::telemetry::NoContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::NoContent::InitAsDefaultInstance();
}

void InitDefaultsNoContent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNoContentImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, qc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, qx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, qy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, qz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::AttitudeQResponse, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HitEvent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HitEvent, priority_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingAngle, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingAngle, pitch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventBase, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventBase, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventBase, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventResponse, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::EventResponse, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingEvent, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingEvent, relativeangleradians_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::HeadingEvent, distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Waypoint, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Waypoint, latitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Waypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::Waypoints, elements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry::NoContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::telemetry::AttitudeQRequest)},
  { 5, -1, sizeof(::telemetry::AttitudeQResponse)},
  { 15, -1, sizeof(::telemetry::HitEvent)},
  { 22, -1, sizeof(::telemetry::HeadingAngle)},
  { 29, -1, sizeof(::telemetry::EventBase)},
  { 37, -1, sizeof(::telemetry::EventResponse)},
  { 44, -1, sizeof(::telemetry::HeadingEvent)},
  { 52, -1, sizeof(::telemetry::Waypoint)},
  { 59, -1, sizeof(::telemetry::Waypoints)},
  { 65, -1, sizeof(::telemetry::NoContent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_AttitudeQRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_AttitudeQResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_HitEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_HeadingAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_EventBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_EventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_HeadingEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_Waypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_Waypoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry::_NoContent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "telemetry_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027telemetry_service.proto\022\ttelemetry\"\022\n\020"
      "AttitudeQRequest\"V\n\021AttitudeQResponse\022\n\n"
      "\002Qc\030\001 \001(\002\022\n\n\002Qx\030\002 \001(\002\022\n\n\002Qy\030\003 \001(\002\022\n\n\002Qz\030"
      "\004 \001(\002\022\021\n\ttimestamp\030\005 \001(\004\"/\n\010HitEvent\022\021\n\t"
      "timestamp\030\001 \001(\004\022\020\n\010priority\030\002 \001(\005\"*\n\014Hea"
      "dingAngle\022\013\n\003yaw\030\001 \001(\002\022\r\n\005pitch\030\002 \001(\002\"S\n"
      "\tEventBase\022!\n\006source\030\001 \001(\0162\021.telemetry.S"
      "ource\022\020\n\010priority\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001"
      "(\004\"E\n\rEventResponse\022!\n\006source\030\001 \001(\0162\021.te"
      "lemetry.Source\022\021\n\ttimestamp\030\002 \001(\004\"{\n\014Hea"
      "dingEvent\022\"\n\004base\030\001 \001(\0132\024.telemetry.Even"
      "tBase\0225\n\024relativeAngleRadians\030\002 \001(\0132\027.te"
      "lemetry.HeadingAngle\022\020\n\010distance\030\003 \001(\002\"/"
      "\n\010Waypoint\022\021\n\tlongitude\030\001 \001(\002\022\020\n\010latitud"
      "e\030\002 \001(\002\"2\n\tWaypoints\022%\n\010elements\030\001 \003(\0132\023"
      ".telemetry.Waypoint\"\013\n\tNoContent*<\n\010Prio"
      "rity\022\024\n\020UNKNOWN_PRIORITY\020\000\022\010\n\004HIGH\020\001\022\007\n\003"
      "MED\0202\022\007\n\003LOW\020d*d\n\006Source\022\022\n\016UNKNOWN_SOUR"
      "CE\020\000\022\025\n\021RGBD_CAMERA_FRONT\020\001\022\027\n\023HCSR04_SE"
      "NSOR_FRONT\020\002\022\026\n\022DEPTH_CAMERA_FRONT\020\0032\255\003\n"
      "\020TelemetryService\022K\n\014GetAttitudeQ\022\033.tele"
      "metry.AttitudeQRequest\032\034.telemetry.Attit"
      "udeQResponse\"\000\022R\n\021GetAttitudeStream\022\033.te"
      "lemetry.AttitudeQRequest\032\034.telemetry.Att"
      "itudeQResponse\"\0000\001\022;\n\010hitEvent\022\023.telemet"
      "ry.HitEvent\032\030.telemetry.EventResponse\"\000\022"
      "C\n\014headingEvent\022\027.telemetry.HeadingEvent"
      "\032\030.telemetry.EventResponse\"\000\0228\n\tsetTarge"
      "t\022\023.telemetry.Waypoint\032\024.telemetry.NoCon"
      "tent\"\000\022<\n\014setWaypoints\022\024.telemetry.Waypo"
      "ints\032\024.telemetry.NoContent\"\000B*\n\024ppcbs.gr"
      "pc.telemetryB\020TelemetryServiceP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "telemetry_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_telemetry_5fservice_2eproto
namespace telemetry {
const ::google::protobuf::EnumDescriptor* Priority_descriptor() {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 50:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Source_descriptor() {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AttitudeQRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttitudeQRequest::AttitudeQRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsAttitudeQRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.AttitudeQRequest)
}
AttitudeQRequest::AttitudeQRequest(const AttitudeQRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.AttitudeQRequest)
}

void AttitudeQRequest::SharedCtor() {
  _cached_size_ = 0;
}

AttitudeQRequest::~AttitudeQRequest() {
  // @@protoc_insertion_point(destructor:telemetry.AttitudeQRequest)
  SharedDtor();
}

void AttitudeQRequest::SharedDtor() {
}

void AttitudeQRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttitudeQRequest::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttitudeQRequest& AttitudeQRequest::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsAttitudeQRequest();
  return *internal_default_instance();
}

AttitudeQRequest* AttitudeQRequest::New(::google::protobuf::Arena* arena) const {
  AttitudeQRequest* n = new AttitudeQRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttitudeQRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.AttitudeQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool AttitudeQRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.AttitudeQRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.AttitudeQRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.AttitudeQRequest)
  return false;
#undef DO_
}

void AttitudeQRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.AttitudeQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.AttitudeQRequest)
}

::google::protobuf::uint8* AttitudeQRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.AttitudeQRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.AttitudeQRequest)
  return target;
}

size_t AttitudeQRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.AttitudeQRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttitudeQRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.AttitudeQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeQRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttitudeQRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.AttitudeQRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.AttitudeQRequest)
    MergeFrom(*source);
  }
}

void AttitudeQRequest::MergeFrom(const AttitudeQRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.AttitudeQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AttitudeQRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.AttitudeQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeQRequest::CopyFrom(const AttitudeQRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.AttitudeQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeQRequest::IsInitialized() const {
  return true;
}

void AttitudeQRequest::Swap(AttitudeQRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttitudeQRequest::InternalSwap(AttitudeQRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttitudeQRequest::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AttitudeQResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttitudeQResponse::kQcFieldNumber;
const int AttitudeQResponse::kQxFieldNumber;
const int AttitudeQResponse::kQyFieldNumber;
const int AttitudeQResponse::kQzFieldNumber;
const int AttitudeQResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttitudeQResponse::AttitudeQResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsAttitudeQResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.AttitudeQResponse)
}
AttitudeQResponse::AttitudeQResponse(const AttitudeQResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qc_, &from.qc_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&qc_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:telemetry.AttitudeQResponse)
}

void AttitudeQResponse::SharedCtor() {
  ::memset(&qc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&qc_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

AttitudeQResponse::~AttitudeQResponse() {
  // @@protoc_insertion_point(destructor:telemetry.AttitudeQResponse)
  SharedDtor();
}

void AttitudeQResponse::SharedDtor() {
}

void AttitudeQResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttitudeQResponse::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttitudeQResponse& AttitudeQResponse::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsAttitudeQResponse();
  return *internal_default_instance();
}

AttitudeQResponse* AttitudeQResponse::New(::google::protobuf::Arena* arena) const {
  AttitudeQResponse* n = new AttitudeQResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttitudeQResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.AttitudeQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&qc_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool AttitudeQResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.AttitudeQResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float Qc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Qx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Qy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Qz = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &qz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.AttitudeQResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.AttitudeQResponse)
  return false;
#undef DO_
}

void AttitudeQResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.AttitudeQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Qc = 1;
  if (this->qc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->qc(), output);
  }

  // float Qx = 2;
  if (this->qx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->qx(), output);
  }

  // float Qy = 3;
  if (this->qy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->qy(), output);
  }

  // float Qz = 4;
  if (this->qz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->qz(), output);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.AttitudeQResponse)
}

::google::protobuf::uint8* AttitudeQResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.AttitudeQResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Qc = 1;
  if (this->qc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->qc(), target);
  }

  // float Qx = 2;
  if (this->qx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->qx(), target);
  }

  // float Qy = 3;
  if (this->qy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->qy(), target);
  }

  // float Qz = 4;
  if (this->qz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->qz(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.AttitudeQResponse)
  return target;
}

size_t AttitudeQResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.AttitudeQResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float Qc = 1;
  if (this->qc() != 0) {
    total_size += 1 + 4;
  }

  // float Qx = 2;
  if (this->qx() != 0) {
    total_size += 1 + 4;
  }

  // float Qy = 3;
  if (this->qy() != 0) {
    total_size += 1 + 4;
  }

  // float Qz = 4;
  if (this->qz() != 0) {
    total_size += 1 + 4;
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttitudeQResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.AttitudeQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeQResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttitudeQResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.AttitudeQResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.AttitudeQResponse)
    MergeFrom(*source);
  }
}

void AttitudeQResponse::MergeFrom(const AttitudeQResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.AttitudeQResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qc() != 0) {
    set_qc(from.qc());
  }
  if (from.qx() != 0) {
    set_qx(from.qx());
  }
  if (from.qy() != 0) {
    set_qy(from.qy());
  }
  if (from.qz() != 0) {
    set_qz(from.qz());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AttitudeQResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.AttitudeQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeQResponse::CopyFrom(const AttitudeQResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.AttitudeQResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeQResponse::IsInitialized() const {
  return true;
}

void AttitudeQResponse::Swap(AttitudeQResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttitudeQResponse::InternalSwap(AttitudeQResponse* other) {
  using std::swap;
  swap(qc_, other->qc_);
  swap(qx_, other->qx_);
  swap(qy_, other->qy_);
  swap(qz_, other->qz_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttitudeQResponse::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HitEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HitEvent::kTimestampFieldNumber;
const int HitEvent::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HitEvent::HitEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHitEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.HitEvent)
}
HitEvent::HitEvent(const HitEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:telemetry.HitEvent)
}

void HitEvent::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
  _cached_size_ = 0;
}

HitEvent::~HitEvent() {
  // @@protoc_insertion_point(destructor:telemetry.HitEvent)
  SharedDtor();
}

void HitEvent::SharedDtor() {
}

void HitEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitEvent::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HitEvent& HitEvent::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHitEvent();
  return *internal_default_instance();
}

HitEvent* HitEvent::New(::google::protobuf::Arena* arena) const {
  HitEvent* n = new HitEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.HitEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool HitEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.HitEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.HitEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.HitEvent)
  return false;
#undef DO_
}

void HitEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.HitEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->priority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.HitEvent)
}

::google::protobuf::uint8* HitEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.HitEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->priority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.HitEvent)
  return target;
}

size_t HitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.HitEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.HitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const HitEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HitEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.HitEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.HitEvent)
    MergeFrom(*source);
  }
}

void HitEvent::MergeFrom(const HitEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.HitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void HitEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.HitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitEvent::CopyFrom(const HitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.HitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEvent::IsInitialized() const {
  return true;
}

void HitEvent::Swap(HitEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HitEvent::InternalSwap(HitEvent* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HitEvent::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeadingAngle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadingAngle::kYawFieldNumber;
const int HeadingAngle::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadingAngle::HeadingAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHeadingAngle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.HeadingAngle)
}
HeadingAngle::HeadingAngle(const HeadingAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:telemetry.HeadingAngle)
}

void HeadingAngle::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
  _cached_size_ = 0;
}

HeadingAngle::~HeadingAngle() {
  // @@protoc_insertion_point(destructor:telemetry.HeadingAngle)
  SharedDtor();
}

void HeadingAngle::SharedDtor() {
}

void HeadingAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadingAngle::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeadingAngle& HeadingAngle::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHeadingAngle();
  return *internal_default_instance();
}

HeadingAngle* HeadingAngle::New(::google::protobuf::Arena* arena) const {
  HeadingAngle* n = new HeadingAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadingAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.HeadingAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
  _internal_metadata_.Clear();
}

bool HeadingAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.HeadingAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float yaw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.HeadingAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.HeadingAngle)
  return false;
#undef DO_
}

void HeadingAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.HeadingAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float yaw = 1;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->yaw(), output);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.HeadingAngle)
}

::google::protobuf::uint8* HeadingAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.HeadingAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float yaw = 1;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->yaw(), target);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.HeadingAngle)
  return target;
}

size_t HeadingAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.HeadingAngle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float yaw = 1;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadingAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.HeadingAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadingAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadingAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.HeadingAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.HeadingAngle)
    MergeFrom(*source);
  }
}

void HeadingAngle::MergeFrom(const HeadingAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.HeadingAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
}

void HeadingAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.HeadingAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadingAngle::CopyFrom(const HeadingAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.HeadingAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadingAngle::IsInitialized() const {
  return true;
}

void HeadingAngle::Swap(HeadingAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadingAngle::InternalSwap(HeadingAngle* other) {
  using std::swap;
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadingAngle::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventBase::kSourceFieldNumber;
const int EventBase::kPriorityFieldNumber;
const int EventBase::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventBase::EventBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsEventBase();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.EventBase)
}
EventBase::EventBase(const EventBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&source_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:telemetry.EventBase)
}

void EventBase::SharedCtor() {
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&source_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

EventBase::~EventBase() {
  // @@protoc_insertion_point(destructor:telemetry.EventBase)
  SharedDtor();
}

void EventBase::SharedDtor() {
}

void EventBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventBase::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventBase& EventBase::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsEventBase();
  return *internal_default_instance();
}

EventBase* EventBase::New(::google::protobuf::Arena* arena) const {
  EventBase* n = new EventBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventBase::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.EventBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&source_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool EventBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.EventBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry.Source source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::telemetry::Source >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.EventBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.EventBase)
  return false;
#undef DO_
}

void EventBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.EventBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->priority(), output);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.EventBase)
}

::google::protobuf::uint8* EventBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.EventBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->priority(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.EventBase)
  return target;
}

size_t EventBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.EventBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.EventBase)
  GOOGLE_DCHECK_NE(&from, this);
  const EventBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.EventBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.EventBase)
    MergeFrom(*source);
  }
}

void EventBase::MergeFrom(const EventBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.EventBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void EventBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.EventBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBase::CopyFrom(const EventBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.EventBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBase::IsInitialized() const {
  return true;
}

void EventBase::Swap(EventBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventBase::InternalSwap(EventBase* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(priority_, other->priority_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventBase::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventResponse::kSourceFieldNumber;
const int EventResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventResponse::EventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsEventResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.EventResponse)
}
EventResponse::EventResponse(const EventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:telemetry.EventResponse)
}

void EventResponse::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
  _cached_size_ = 0;
}

EventResponse::~EventResponse() {
  // @@protoc_insertion_point(destructor:telemetry.EventResponse)
  SharedDtor();
}

void EventResponse::SharedDtor() {
}

void EventResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventResponse::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventResponse& EventResponse::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsEventResponse();
  return *internal_default_instance();
}

EventResponse* EventResponse::New(::google::protobuf::Arena* arena) const {
  EventResponse* n = new EventResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.EventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
  _internal_metadata_.Clear();
}

bool EventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.EventResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry.Source source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::telemetry::Source >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.EventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.EventResponse)
  return false;
#undef DO_
}

void EventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.EventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.EventResponse)
}

::google::protobuf::uint8* EventResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.EventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.EventResponse)
  return target;
}

size_t EventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.EventResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // .telemetry.Source source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.EventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EventResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.EventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.EventResponse)
    MergeFrom(*source);
  }
}

void EventResponse::MergeFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.EventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void EventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.EventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventResponse::CopyFrom(const EventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.EventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventResponse::IsInitialized() const {
  return true;
}

void EventResponse::Swap(EventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventResponse::InternalSwap(EventResponse* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventResponse::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeadingEvent::InitAsDefaultInstance() {
  ::telemetry::_HeadingEvent_default_instance_._instance.get_mutable()->base_ = const_cast< ::telemetry::EventBase*>(
      ::telemetry::EventBase::internal_default_instance());
  ::telemetry::_HeadingEvent_default_instance_._instance.get_mutable()->relativeangleradians_ = const_cast< ::telemetry::HeadingAngle*>(
      ::telemetry::HeadingAngle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadingEvent::kBaseFieldNumber;
const int HeadingEvent::kRelativeAngleRadiansFieldNumber;
const int HeadingEvent::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadingEvent::HeadingEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHeadingEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.HeadingEvent)
}
HeadingEvent::HeadingEvent(const HeadingEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::telemetry::EventBase(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_relativeangleradians()) {
    relativeangleradians_ = new ::telemetry::HeadingAngle(*from.relativeangleradians_);
  } else {
    relativeangleradians_ = NULL;
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:telemetry.HeadingEvent)
}

void HeadingEvent::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&base_)) + sizeof(distance_));
  _cached_size_ = 0;
}

HeadingEvent::~HeadingEvent() {
  // @@protoc_insertion_point(destructor:telemetry.HeadingEvent)
  SharedDtor();
}

void HeadingEvent::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete relativeangleradians_;
}

void HeadingEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadingEvent::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeadingEvent& HeadingEvent::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsHeadingEvent();
  return *internal_default_instance();
}

HeadingEvent* HeadingEvent::New(::google::protobuf::Arena* arena) const {
  HeadingEvent* n = new HeadingEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeadingEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.HeadingEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && relativeangleradians_ != NULL) {
    delete relativeangleradians_;
  }
  relativeangleradians_ = NULL;
  distance_ = 0;
  _internal_metadata_.Clear();
}

bool HeadingEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.HeadingEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry.EventBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry.HeadingAngle relativeAngleRadians = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relativeangleradians()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.HeadingEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.HeadingEvent)
  return false;
#undef DO_
}

void HeadingEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.HeadingEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.EventBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // .telemetry.HeadingAngle relativeAngleRadians = 2;
  if (this->has_relativeangleradians()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->relativeangleradians_, output);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.HeadingEvent)
}

::google::protobuf::uint8* HeadingEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.HeadingEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry.EventBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->base_, deterministic, target);
  }

  // .telemetry.HeadingAngle relativeAngleRadians = 2;
  if (this->has_relativeangleradians()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->relativeangleradians_, deterministic, target);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.HeadingEvent)
  return target;
}

size_t HeadingEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.HeadingEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry.EventBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_);
  }

  // .telemetry.HeadingAngle relativeAngleRadians = 2;
  if (this->has_relativeangleradians()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->relativeangleradians_);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadingEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.HeadingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadingEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeadingEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.HeadingEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.HeadingEvent)
    MergeFrom(*source);
  }
}

void HeadingEvent::MergeFrom(const HeadingEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.HeadingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::telemetry::EventBase::MergeFrom(from.base());
  }
  if (from.has_relativeangleradians()) {
    mutable_relativeangleradians()->::telemetry::HeadingAngle::MergeFrom(from.relativeangleradians());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void HeadingEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.HeadingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadingEvent::CopyFrom(const HeadingEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.HeadingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadingEvent::IsInitialized() const {
  return true;
}

void HeadingEvent::Swap(HeadingEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadingEvent::InternalSwap(HeadingEvent* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(relativeangleradians_, other->relativeangleradians_);
  swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeadingEvent::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Waypoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waypoint::kLongitudeFieldNumber;
const int Waypoint::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waypoint::Waypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsWaypoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:telemetry.Waypoint)
}

void Waypoint::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _cached_size_ = 0;
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:telemetry.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
}

void Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waypoint& Waypoint::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsWaypoint();
  return *internal_default_instance();
}

Waypoint* Waypoint::New(::google::protobuf::Arena* arena) const {
  Waypoint* n = new Waypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->longitude(), output);
  }

  // float latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.Waypoint)
}

::google::protobuf::uint8* Waypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->longitude(), target);
  }

  // float latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Waypoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.Waypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Waypoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waypoints::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waypoints::Waypoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsWaypoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.Waypoints)
}
Waypoints::Waypoints(const Waypoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      elements_(from.elements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.Waypoints)
}

void Waypoints::SharedCtor() {
  _cached_size_ = 0;
}

Waypoints::~Waypoints() {
  // @@protoc_insertion_point(destructor:telemetry.Waypoints)
  SharedDtor();
}

void Waypoints::SharedDtor() {
}

void Waypoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoints::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waypoints& Waypoints::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsWaypoints();
  return *internal_default_instance();
}

Waypoints* Waypoints::New(::google::protobuf::Arena* arena) const {
  Waypoints* n = new Waypoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Waypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

bool Waypoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.Waypoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .telemetry.Waypoint elements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.Waypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.Waypoints)
  return false;
#undef DO_
}

void Waypoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.Waypoint elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.Waypoints)
}

::google::protobuf::uint8* Waypoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.Waypoint elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->elements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Waypoints)
  return target;
}

size_t Waypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Waypoints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry.Waypoint elements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.Waypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waypoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.Waypoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.Waypoints)
    MergeFrom(*source);
  }
}

void Waypoints::MergeFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Waypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void Waypoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.Waypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoints::CopyFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Waypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoints::IsInitialized() const {
  return true;
}

void Waypoints::Swap(Waypoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waypoints::InternalSwap(Waypoints* other) {
  using std::swap;
  elements_.InternalSwap(&other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Waypoints::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NoContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoContent::NoContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_telemetry_5fservice_2eproto::InitDefaultsNoContent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.NoContent)
}
NoContent::NoContent(const NoContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.NoContent)
}

void NoContent::SharedCtor() {
  _cached_size_ = 0;
}

NoContent::~NoContent() {
  // @@protoc_insertion_point(destructor:telemetry.NoContent)
  SharedDtor();
}

void NoContent::SharedDtor() {
}

void NoContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoContent::descriptor() {
  ::protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoContent& NoContent::default_instance() {
  ::protobuf_telemetry_5fservice_2eproto::InitDefaultsNoContent();
  return *internal_default_instance();
}

NoContent* NoContent::New(::google::protobuf::Arena* arena) const {
  NoContent* n = new NoContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoContent::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.NoContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NoContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.NoContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.NoContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.NoContent)
  return false;
#undef DO_
}

void NoContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.NoContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.NoContent)
}

::google::protobuf::uint8* NoContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.NoContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.NoContent)
  return target;
}

size_t NoContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.NoContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry.NoContent)
  GOOGLE_DCHECK_NE(&from, this);
  const NoContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.NoContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.NoContent)
    MergeFrom(*source);
  }
}

void NoContent::MergeFrom(const NoContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.NoContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry.NoContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoContent::CopyFrom(const NoContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.NoContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoContent::IsInitialized() const {
  return true;
}

void NoContent::Swap(NoContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoContent::InternalSwap(NoContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoContent::GetMetadata() const {
  protobuf_telemetry_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry

// @@protoc_insertion_point(global_scope)
