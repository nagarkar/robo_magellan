// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: telemetry_service.proto
#ifndef GRPC_telemetry_5fservice_2eproto__INCLUDED
#define GRPC_telemetry_5fservice_2eproto__INCLUDED

#include "telemetry_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace telemetry {

// Telemetry Service
class TelemetryService final {
 public:
  static constexpr char const* service_full_name() {
    return "telemetry.TelemetryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Simple RPC
    virtual ::grpc::Status GetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::telemetry::AttitudeQResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>> AsyncGetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>>(AsyncGetAttitudeQRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>> PrepareAsyncGetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>>(PrepareAsyncGetAttitudeQRaw(context, request, cq));
    }
    // Server to client streaming RPC
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telemetry::AttitudeQResponse>> GetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telemetry::AttitudeQResponse>>(GetAttitudeStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>> AsyncGetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>>(AsyncGetAttitudeStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>> PrepareAsyncGetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>>(PrepareAsyncGetAttitudeStreamRaw(context, request, cq));
    }
    // Event Registration
    virtual ::grpc::Status hitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::telemetry::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>> AsynchitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>>(AsynchitEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>> PrepareAsynchitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>>(PrepareAsynchitEventRaw(context, request, cq));
    }
    virtual ::grpc::Status headingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::telemetry::EventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>> AsyncheadingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>>(AsyncheadingEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>> PrepareAsyncheadingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>>(PrepareAsyncheadingEventRaw(context, request, cq));
    }
    // Navigation
    virtual ::grpc::Status setTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::telemetry::NoContent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>> AsyncsetTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>>(AsyncsetTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>> PrepareAsyncsetTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>>(PrepareAsyncsetTargetRaw(context, request, cq));
    }
    virtual ::grpc::Status setWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::telemetry::NoContent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>> AsyncsetWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>>(AsyncsetWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>> PrepareAsyncsetWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>>(PrepareAsyncsetWaypointsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>* AsyncGetAttitudeQRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::AttitudeQResponse>* PrepareAsyncGetAttitudeQRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telemetry::AttitudeQResponse>* GetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>* AsyncGetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telemetry::AttitudeQResponse>* PrepareAsyncGetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>* AsynchitEventRaw(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>* PrepareAsynchitEventRaw(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>* AsyncheadingEventRaw(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::EventResponse>* PrepareAsyncheadingEventRaw(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>* AsyncsetTargetRaw(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>* PrepareAsyncsetTargetRaw(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>* AsyncsetWaypointsRaw(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telemetry::NoContent>* PrepareAsyncsetWaypointsRaw(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::telemetry::AttitudeQResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>> AsyncGetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>>(AsyncGetAttitudeQRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>> PrepareAsyncGetAttitudeQ(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>>(PrepareAsyncGetAttitudeQRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telemetry::AttitudeQResponse>> GetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telemetry::AttitudeQResponse>>(GetAttitudeStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>> AsyncGetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>>(AsyncGetAttitudeStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>> PrepareAsyncGetAttitudeStream(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>>(PrepareAsyncGetAttitudeStreamRaw(context, request, cq));
    }
    ::grpc::Status hitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::telemetry::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>> AsynchitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>>(AsynchitEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>> PrepareAsynchitEvent(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>>(PrepareAsynchitEventRaw(context, request, cq));
    }
    ::grpc::Status headingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::telemetry::EventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>> AsyncheadingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>>(AsyncheadingEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>> PrepareAsyncheadingEvent(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>>(PrepareAsyncheadingEventRaw(context, request, cq));
    }
    ::grpc::Status setTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::telemetry::NoContent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>> AsyncsetTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>>(AsyncsetTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>> PrepareAsyncsetTarget(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>>(PrepareAsyncsetTargetRaw(context, request, cq));
    }
    ::grpc::Status setWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::telemetry::NoContent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>> AsyncsetWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>>(AsyncsetWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>> PrepareAsyncsetWaypoints(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>>(PrepareAsyncsetWaypointsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>* AsyncGetAttitudeQRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::AttitudeQResponse>* PrepareAsyncGetAttitudeQRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telemetry::AttitudeQResponse>* GetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request) override;
    ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>* AsyncGetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telemetry::AttitudeQResponse>* PrepareAsyncGetAttitudeStreamRaw(::grpc::ClientContext* context, const ::telemetry::AttitudeQRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>* AsynchitEventRaw(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>* PrepareAsynchitEventRaw(::grpc::ClientContext* context, const ::telemetry::HitEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>* AsyncheadingEventRaw(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::EventResponse>* PrepareAsyncheadingEventRaw(::grpc::ClientContext* context, const ::telemetry::HeadingEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>* AsyncsetTargetRaw(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>* PrepareAsyncsetTargetRaw(::grpc::ClientContext* context, const ::telemetry::Waypoint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>* AsyncsetWaypointsRaw(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telemetry::NoContent>* PrepareAsyncsetWaypointsRaw(::grpc::ClientContext* context, const ::telemetry::Waypoints& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAttitudeQ_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAttitudeStream_;
    const ::grpc::internal::RpcMethod rpcmethod_hitEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_headingEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_setTarget_;
    const ::grpc::internal::RpcMethod rpcmethod_setWaypoints_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Simple RPC
    virtual ::grpc::Status GetAttitudeQ(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::telemetry::AttitudeQResponse* response);
    // Server to client streaming RPC
    virtual ::grpc::Status GetAttitudeStream(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::grpc::ServerWriter< ::telemetry::AttitudeQResponse>* writer);
    // Event Registration
    virtual ::grpc::Status hitEvent(::grpc::ServerContext* context, const ::telemetry::HitEvent* request, ::telemetry::EventResponse* response);
    virtual ::grpc::Status headingEvent(::grpc::ServerContext* context, const ::telemetry::HeadingEvent* request, ::telemetry::EventResponse* response);
    // Navigation
    virtual ::grpc::Status setTarget(::grpc::ServerContext* context, const ::telemetry::Waypoint* request, ::telemetry::NoContent* response);
    virtual ::grpc::Status setWaypoints(::grpc::ServerContext* context, const ::telemetry::Waypoints* request, ::telemetry::NoContent* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAttitudeQ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAttitudeQ() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAttitudeQ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitudeQ(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::telemetry::AttitudeQResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttitudeQ(::grpc::ServerContext* context, ::telemetry::AttitudeQRequest* request, ::grpc::ServerAsyncResponseWriter< ::telemetry::AttitudeQResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAttitudeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAttitudeStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAttitudeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitudeStream(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::grpc::ServerWriter< ::telemetry::AttitudeQResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttitudeStream(::grpc::ServerContext* context, ::telemetry::AttitudeQRequest* request, ::grpc::ServerAsyncWriter< ::telemetry::AttitudeQResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hitEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_hitEvent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_hitEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hitEvent(::grpc::ServerContext* context, const ::telemetry::HitEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthitEvent(::grpc::ServerContext* context, ::telemetry::HitEvent* request, ::grpc::ServerAsyncResponseWriter< ::telemetry::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_headingEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_headingEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_headingEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status headingEvent(::grpc::ServerContext* context, const ::telemetry::HeadingEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestheadingEvent(::grpc::ServerContext* context, ::telemetry::HeadingEvent* request, ::grpc::ServerAsyncResponseWriter< ::telemetry::EventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setTarget() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setTarget(::grpc::ServerContext* context, const ::telemetry::Waypoint* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetTarget(::grpc::ServerContext* context, ::telemetry::Waypoint* request, ::grpc::ServerAsyncResponseWriter< ::telemetry::NoContent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setWaypoints() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_setWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setWaypoints(::grpc::ServerContext* context, const ::telemetry::Waypoints* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetWaypoints(::grpc::ServerContext* context, ::telemetry::Waypoints* request, ::grpc::ServerAsyncResponseWriter< ::telemetry::NoContent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAttitudeQ<WithAsyncMethod_GetAttitudeStream<WithAsyncMethod_hitEvent<WithAsyncMethod_headingEvent<WithAsyncMethod_setTarget<WithAsyncMethod_setWaypoints<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetAttitudeQ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAttitudeQ() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAttitudeQ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitudeQ(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::telemetry::AttitudeQResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAttitudeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAttitudeStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAttitudeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitudeStream(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::grpc::ServerWriter< ::telemetry::AttitudeQResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hitEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_hitEvent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_hitEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hitEvent(::grpc::ServerContext* context, const ::telemetry::HitEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_headingEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_headingEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_headingEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status headingEvent(::grpc::ServerContext* context, const ::telemetry::HeadingEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setTarget() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setTarget(::grpc::ServerContext* context, const ::telemetry::Waypoint* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setWaypoints() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_setWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setWaypoints(::grpc::ServerContext* context, const ::telemetry::Waypoints* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAttitudeQ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAttitudeQ() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::telemetry::AttitudeQRequest, ::telemetry::AttitudeQResponse>(std::bind(&WithStreamedUnaryMethod_GetAttitudeQ<BaseClass>::StreamedGetAttitudeQ, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAttitudeQ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAttitudeQ(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::telemetry::AttitudeQResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAttitudeQ(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telemetry::AttitudeQRequest,::telemetry::AttitudeQResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hitEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_hitEvent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::telemetry::HitEvent, ::telemetry::EventResponse>(std::bind(&WithStreamedUnaryMethod_hitEvent<BaseClass>::StreamedhitEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_hitEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hitEvent(::grpc::ServerContext* context, const ::telemetry::HitEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhitEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telemetry::HitEvent,::telemetry::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_headingEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_headingEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::telemetry::HeadingEvent, ::telemetry::EventResponse>(std::bind(&WithStreamedUnaryMethod_headingEvent<BaseClass>::StreamedheadingEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_headingEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status headingEvent(::grpc::ServerContext* context, const ::telemetry::HeadingEvent* request, ::telemetry::EventResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedheadingEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telemetry::HeadingEvent,::telemetry::EventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setTarget() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::telemetry::Waypoint, ::telemetry::NoContent>(std::bind(&WithStreamedUnaryMethod_setTarget<BaseClass>::StreamedsetTarget, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setTarget(::grpc::ServerContext* context, const ::telemetry::Waypoint* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetTarget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telemetry::Waypoint,::telemetry::NoContent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setWaypoints() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::telemetry::Waypoints, ::telemetry::NoContent>(std::bind(&WithStreamedUnaryMethod_setWaypoints<BaseClass>::StreamedsetWaypoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setWaypoints(::grpc::ServerContext* context, const ::telemetry::Waypoints* request, ::telemetry::NoContent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetWaypoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telemetry::Waypoints,::telemetry::NoContent>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAttitudeQ<WithStreamedUnaryMethod_hitEvent<WithStreamedUnaryMethod_headingEvent<WithStreamedUnaryMethod_setTarget<WithStreamedUnaryMethod_setWaypoints<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAttitudeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetAttitudeStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::telemetry::AttitudeQRequest, ::telemetry::AttitudeQResponse>(std::bind(&WithSplitStreamingMethod_GetAttitudeStream<BaseClass>::StreamedGetAttitudeStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetAttitudeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAttitudeStream(::grpc::ServerContext* context, const ::telemetry::AttitudeQRequest* request, ::grpc::ServerWriter< ::telemetry::AttitudeQResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAttitudeStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telemetry::AttitudeQRequest,::telemetry::AttitudeQResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAttitudeStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAttitudeQ<WithSplitStreamingMethod_GetAttitudeStream<WithStreamedUnaryMethod_hitEvent<WithStreamedUnaryMethod_headingEvent<WithStreamedUnaryMethod_setTarget<WithStreamedUnaryMethod_setWaypoints<Service > > > > > > StreamedService;
};

}  // namespace telemetry


#endif  // GRPC_telemetry_5fservice_2eproto__INCLUDED
