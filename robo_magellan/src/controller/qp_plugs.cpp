//$file${.::qp_plugs.cpp} ####################################################
//
// Model: imu.qm
// File:  ${.::qp_plugs.cpp}
//
// This code has been generated by QM tool (https://state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//$endhead${.::qp_plugs.cpp} #################################################
#include "qpcpp.h"
#include "controller/bsp.h"
#include <iostream>
#include <stdlib.h>
#include <string.h>      // for memcpy() and memset()
#include <sys/select.h>
#include <termios.h>
#include <unistd.h>

Q_DEFINE_THIS_FILE

using namespace QP;
using namespace std;

static struct termios l_tsav;

//............................................................................
void QF::onStartup(void) {
    struct termios tio;  // modified terminal attributes

    tcgetattr(0, &l_tsav); // save the current terminal attributes
    tcgetattr(0, &tio);    // obtain the current terminal attributes
    tio.c_lflag &= ~(ICANON | ECHO); // disable the canonical mode & echo
    tcsetattr(0, TCSANOW, &tio);     // set the new attributes

    QF_setTickRate(BSP_TICKS_PER_SEC); // set the desired tick rate
}
//............................................................................
void QF::onCleanup(void) {
    BSP_Cleanup();
    cout << endl << "Bye Bye!!!" << endl;
    tcsetattr(0, TCSANOW, &l_tsav); // restore the saved terminal attributes
}
//............................................................................
void QP::QF_onClockTick(void) {
    QF::TICK_X(0U, (void *)0);  // perform the QF clock tick processing
#ifdef QP_SCAN_INPUT
    struct timeval timeout = { 0, 0 }; // timeout for select()
    fd_set con; // FD set representing the console    FD_ZERO(&con);
    FD_SET(0, &con);
    // check if a console input is available, returns immediately
    if (0 != select(1, &con, 0, 0, &timeout)) { // any descriptor set?
        char ch;
        read(0, &ch, 1);
        if (ch == '\33') { // ESC pressed?
            QF::stop();
        }
        if (ch == 'a') { // ESC pressed?
            BSP_Toggle_a();
        }
        if (ch == 'g') { // ESC pressed?
            BSP_Toggle_g();
        }
        if (ch == 'm') { // ESC pressed?
            BSP_Toggle_m();
        }
        if (ch == 'q') { // ESC pressed?
            BSP_Toggle_q();
        }
        if (ch == 'd') { // ESC pressed?
            BSP_Toggle_d();
        }
        if (ch == 's') { // ESC pressed?
            BSP_Toggle_s();
        }
    }
#endif
}
//............................................................................
extern "C" void Q_onAssert(char const * const module, int loc) {
    cout << "Assertion failed in " << module
              << "location " << loc << endl;
    QS_ASSERTION(module, loc, static_cast<uint32_t>(10000U));
    exit(-1);
}
