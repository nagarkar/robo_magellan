//$file${.::active_objects.cpp} ##############################################
//
// Model: imu.qm
// File:  ${.::active_objects.cpp}
//
// This code has been generated by QM tool (https://state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//$endhead${.::active_objects.cpp} ###########################################
#include "qpcpp.h" // QP/C++ framework API
#include "bsp.h"   // Board Support Package interface
#include "active_objects.h"
#include "aosp.h"


/**
 * This file contains teh following format:
 * <declaration of AO type>
 * <declaration of local variable of the type>
 *
 * This way, the order of declarations matters, and earlier variables can be used later.
 *
 * At teh end of the file, all the variables are declared as opaque pointers to QActive objects,
 * and used elsewhere, for instance, to start the AO in the main program.
**/
using namespace QP;

//$define${AOs::DifferentialControlEvt} ######################################
// Check for the minimum required QP version
#if ((QP_VERSION < 601) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 6.0.1 or higher required
#endif
//${AOs::DifferentialControlEvt} .............................................
//${AOs::DifferentialCont~::DifferentialControlEvt} ..........................
DifferentialControlEvt::DifferentialControlEvt(
    QSignal sig,
    double & r_left_speed,
    double& r_right_speed)
: QEvt(sig), left_speed(r_left_speed), right_speed(r_right_speed)
{}
//$enddef${AOs::DifferentialControlEvt} ######################################

//$declare${AOs::Blinky} #####################################################
//${AOs::Blinky} .............................................................
class Blinky : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    Blinky();

protected:
    static QP::QState initial(Blinky * const me, QP::QEvt const * const e);
    static QP::QState off(Blinky * const me, QP::QEvt const * const e);
    static QP::QState on(Blinky * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::Blinky} #####################################################
Blinky l_blinky;
QActive * const AO_Blinky    = &l_blinky; // opaque pointer
//$define${AOs::Blinky} ######################################################
//${AOs::Blinky} .............................................................
//${AOs::Blinky::Blinky} .....................................................
Blinky::Blinky()
  : QActive(Q_STATE_CAST(&Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG)
{}

//${AOs::Blinky::SM} .........................................................
QP::QState Blinky::initial(Blinky * const me, QP::QEvt const * const e) {
    //${AOs::Blinky::SM::initial}
    // arm the private time event to expire in 1/2s
    // and periodically every 1/2 second
    me->m_timeEvt.armX(BLINKY_TICKS, BLINKY_TICKS);
    return Q_TRAN(&off);
}
//${AOs::Blinky::SM::off} ....................................................
QP::QState Blinky::off(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky::SM::off}
        case Q_ENTRY_SIG: {
            BSP_ledOff();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky::SM::off::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&on);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::Blinky::SM::on} .....................................................
QP::QState Blinky::on(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Blinky::SM::on}
        case Q_ENTRY_SIG: {
            BSP_ledOn();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::Blinky::SM::on::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&off);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Blinky} ######################################################


//$declare${AOs::AHRS} #######################################################
//${AOs::AHRS} ...............................................................
class AHRS : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    AHRS();

protected:
    static QP::QState initial(AHRS * const me, QP::QEvt const * const e);
    static QP::QState RUNNING(AHRS * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::AHRS} #######################################################
AHRS l_ahrs;
QActive * const AO_AHRS      = &l_ahrs; // opaque pointer
//$define${AOs::AHRS} ########################################################
//${AOs::AHRS} ...............................................................
//${AOs::AHRS::AHRS} .........................................................
AHRS::AHRS()
  : QActive(Q_STATE_CAST(&AHRS::initial)),
    m_timeEvt(this, TIMEOUT_SIG)
{}

//${AOs::AHRS::SM} ...........................................................
QP::QState AHRS::initial(AHRS * const me, QP::QEvt const * const e) {
    //${AOs::AHRS::SM::initial}
    if(quaternion_calculation_mode == SOFTWARE) {
        me->m_timeEvt.armX(AHRS_TICKS, AHRS_TICKS);
    }
    BSP_SetupIMU();
    return Q_TRAN(&RUNNING);
}
//${AOs::AHRS::SM::RUNNING} ..................................................
QP::QState AHRS::RUNNING(AHRS * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::AHRS::SM::RUNNING::TIMEOUT}
        case TIMEOUT_SIG: {
            BSP_PublishAttitude();
            status_ = Q_TRAN(&RUNNING);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::AHRS} ########################################################


//$declare${AOs::GPS} ########################################################
//${AOs::GPS} ................................................................
class GPS : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;
    enum {GPS_ERROR_NONE, GPS_SETUP_ERROR, GPS_GET_ERROR, MAX_ERRORS = 5} error_type;

public:
    int n_errors;

public:
    GPS();

protected:
    static QP::QState initial(GPS * const me, QP::QEvt const * const e);
    static QP::QState RUNNING_WAIT_STATE(GPS * const me, QP::QEvt const * const e);
    static QP::QState SETUP(GPS * const me, QP::QEvt const * const e);
    static QP::QState ERROR(GPS * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::GPS} ########################################################
GPS l_gps;
QActive * const AO_GPS       = &l_gps; // opaque pointer
//$define${AOs::GPS} #########################################################
//${AOs::GPS} ................................................................
//${AOs::GPS::GPS} ...........................................................
GPS::GPS()
  : QActive(Q_STATE_CAST(&GPS::initial)),
    m_timeEvt(this, TIMEOUT_SIG)
{}

//${AOs::GPS::SM} ............................................................
QP::QState GPS::initial(GPS * const me, QP::QEvt const * const e) {
    //${AOs::GPS::SM::initial}
    me->m_timeEvt.armX(BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);
    return Q_TRAN(&SETUP);
}
//${AOs::GPS::SM::RUNNING_WAIT_STATE} ........................................
QP::QState GPS::RUNNING_WAIT_STATE(GPS * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::GPS::SM::RUNNING_WAIT_STA~::TIMEOUT}
        case TIMEOUT_SIG: {
            gps_data_t gps_out;
            if(!BSP_GPS_Get(gps_out)){
                me->error_type = GPS_SETUP_ERROR;
            } else {
                me->error_type = GPS_ERROR_NONE;
            }
            //${AOs::GPS::SM::RUNNING_WAIT_STA~::TIMEOUT::[error]}
            if (me->error_type != GPS_ERROR_NONE) {
                status_ = Q_TRAN(&ERROR);
            }
            //${AOs::GPS::SM::RUNNING_WAIT_STA~::TIMEOUT::[noerror]}
            else if (me->error_type == GPS_ERROR_NONE) {
                me->n_errors = 0;
                status_ = Q_TRAN(&RUNNING_WAIT_STATE);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::GPS::SM::SETUP} .....................................................
QP::QState GPS::SETUP(GPS * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::GPS::SM::SETUP}
        case Q_ENTRY_SIG: {
            if(!BSP_GPS_Setup()) {
               me->error_type = GPS_SETUP_ERROR;
            } else {
               me->error_type = GPS_ERROR_NONE;
            }
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::GPS::SM::SETUP::TIMEOUT}
        case TIMEOUT_SIG: {
            //${AOs::GPS::SM::SETUP::TIMEOUT::[error]}
            if (me->error_type != GPS_ERROR_NONE) {
                status_ = Q_TRAN(&ERROR);
            }
            //${AOs::GPS::SM::SETUP::TIMEOUT::[noerror]}
            else if (me->error_type == GPS_ERROR_NONE) {
                status_ = Q_TRAN(&RUNNING_WAIT_STATE);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::GPS::SM::ERROR} .....................................................
QP::QState GPS::ERROR(GPS * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::GPS::SM::ERROR}
        case Q_ENTRY_SIG: {
            me->n_errors++;

            if(!BSP_GPS_Close()) {
              printf("ERROR: Could not Close GPS");
            }
            if (me->n_errors > MAX_ERRORS) {
              printf("FATAL ERROR IN GPS: Exceeded Safe Error Limit. STOPPING STATE MACHINE");
              me->m_timeEvt.disarm();
            }
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::GPS::SM::ERROR::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&SETUP);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::GPS} #########################################################

//$declare${AOs::DSM} ########################################################
//${AOs::DSM} ................................................................
class DSM : public QP::QActive {
private:
    QP::QTimeEvt m_time_evt;

public:
    DSM();

protected:
    static QP::QState initial(DSM * const me, QP::QEvt const * const e);
    static QP::QState Automatic(DSM * const me, QP::QEvt const * const e);
    static QP::QState RemoteControl(DSM * const me, QP::QEvt const * const e);
    static QP::QState WaitForConnection(DSM * const me, QP::QEvt const * const e);
    static QP::QState Connected(DSM * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::DSM} ########################################################
DSM l_dsm;
QActive * const AO_DSM       = &l_dsm; // opaque pointer
//$define${AOs::DSM} #########################################################
//${AOs::DSM} ................................................................
//${AOs::DSM::DSM} ...........................................................
DSM::DSM()
  : QActive(Q_STATE_CAST(&DSM::initial)),
    m_time_evt(this, TIMEOUT_SIG)
{}

//${AOs::DSM::SM} ............................................................
QP::QState DSM::initial(DSM * const me, QP::QEvt const * const e) {
    //${AOs::DSM::SM::initial}
    BSP_Warn_on_failure(BSP_MOTORS_Setup(), "Failed on BSP_Motor_Setup");
    return Q_TRAN(&RemoteControl);
}
//${AOs::DSM::SM::Automatic} .................................................
QP::QState DSM::Automatic(DSM * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DSM::SM::Automatic::SWITCH_TO_REMOTE}
        case SWITCH_TO_REMOTE_SIG: {
            status_ = Q_TRAN(&RemoteControl);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::DSM::SM::RemoteControl} .............................................
QP::QState DSM::RemoteControl(DSM * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DSM::SM::RemoteControl}
        case Q_ENTRY_SIG: {
            me->m_time_evt.armX(BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);

            AOSP_DSM_Callback_Deactivate(); // Activate it later when DSM is initialized.
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::DSM::SM::RemoteControl::initial}
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&WaitForConnection);
            break;
        }
        //${AOs::DSM::SM::RemoteControl::SWITCH_TO_AUTO}
        case SWITCH_TO_AUTO_SIG: {
            BSP_Warn_on_failure(BSP_DSM_Close(),
                "Failed to close DSM when switching to auto mode");
            status_ = Q_TRAN(&Automatic);
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//${AOs::DSM::SM::RemoteControl::WaitForConnection} ..........................
QP::QState DSM::WaitForConnection(DSM * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DSM::SM::RemoteControl::WaitForConnection}
        case Q_ENTRY_SIG: {
            BSP_Warn_on_failure(BSP_DSM_Close(), "Failed on BSP_DSM_Close");
            BSP_Warn_on_failure(BSP_DSM_Setup(), "Failed on BSP_DSM_Setup");
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::DSM::SM::RemoteControl::WaitForConnectio~::TIMEOUT}
        case TIMEOUT_SIG: {
            //${AOs::DSM::SM::RemoteControl::WaitForConnectio~::TIMEOUT::[DSMdown]}
            if (!BSP_DSM_IsUp()) {
                status_ = Q_TRAN(&WaitForConnection);
            }
            //${AOs::DSM::SM::RemoteControl::WaitForConnectio~::TIMEOUT::[DSMUp]}
            else if (BSP_DSM_IsUp()) {
                status_ = Q_TRAN(&Connected);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&RemoteControl);
            break;
        }
    }
    return status_;
}
//${AOs::DSM::SM::RemoteControl::Connected} ..................................
QP::QState DSM::Connected(DSM * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::DSM::SM::RemoteControl::Connected}
        case Q_ENTRY_SIG: {
            AOSP_DSM_Callback_Activate();
            status_ = Q_HANDLED();
            break;
        }
        //${AOs::DSM::SM::RemoteControl::Connected::TIMEOUT}
        case TIMEOUT_SIG: {
            //${AOs::DSM::SM::RemoteControl::Connected::TIMEOUT::[DSMDown]}
            if (!BSP_DSM_IsUp()) {
                AOSP_DSM_Callback_Activate();
                status_ = Q_TRAN(&WaitForConnection);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&RemoteControl);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::DSM} #########################################################

//$declare${AOs::TelemetryServer} ############################################
//${AOs::TelemetryServer} ....................................................
class TelemetryServer : public QP::QActive {
public:
    CircularBuffer<Attitude> * attitudeBuffer;

public:
    TelemetryServer(CircularBuffer<Attitude> * buffer);

protected:
    static QP::QState initial(TelemetryServer * const me, QP::QEvt const * const e);
    static QP::QState RUNNING(TelemetryServer * const me, QP::QEvt const * const e);
};
//$enddecl${AOs::TelemetryServer} ############################################
TelemetryServer l_tServer(attitudeBuffer);
QActive * const AO_TServer   = &l_tServer; // opaque pointer
//$define${AOs::TelemetryServer} #############################################
//${AOs::TelemetryServer} ....................................................
//${AOs::TelemetryServer::TelemetryServer} ...................................
TelemetryServer::TelemetryServer(CircularBuffer<Attitude> * buffer)
    : QActive(Q_STATE_CAST(&TelemetryServer::initial)), attitudeBuffer(buffer)
{}

//${AOs::TelemetryServer::SM} ................................................
QP::QState TelemetryServer::initial(TelemetryServer * const me, QP::QEvt const * const e) {
    //${AOs::TelemetryServer::SM::initial}
    return Q_TRAN(&RUNNING);
}
//${AOs::TelemetryServer::SM::RUNNING} .......................................
QP::QState TelemetryServer::RUNNING(TelemetryServer * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::TelemetryServer::SM::RUNNING}
        case Q_ENTRY_SIG: {
            TelemetryServiceImpl::RunServer(me->attitudeBuffer, true /* wait */);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::TelemetryServer} #############################################


// Opaque pointers
